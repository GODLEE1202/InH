package COM.ex0411.pm;

public class Ex05 {

	public static void main(String[] args) {
		
		//배열(Array)
		/*
		 * 하나의 공간 안에 여러개의 값을 연속적으로 담을 수 있게 만들어진 참조형 객체
		 * 배열을 선언하게 되면 크게 두가지 방식으로 선언할 수 있다.
		 * 1. 공간할당방식
		 * 	형태: 타입[] 변수명 = new 타입[공간갯수];
		 * 	공간할당 후에는 각각의 영역에 인덱스로 접근이 가능하다.
		 * 	공간할당 방식으로 선언시 각 공간에는 해당 타입의 초기값이 들어있다.
		 * 	타입이 실수일 경우 0.0 정수일경우 0 문자형일 경우 \u0000 논리형일경우 false로 초기화 된다.
		 * 	공간 할당 방식으로 선언 뒤에 바로 값을 넣고자 한다면{}브레이스를 이용해서 값을 나열하여 선언할 수 있다. 단 이때는 []안쪽에 갯수를 지정할 필요는 없다.
		 * 	형태 : 타입[] 변수명 = new 타입[]{나열};
		 * 
		 *  
		 * 2. 직접선언 방식
		 * 	형태 타입[] 변수명 = {나열할 값};
		 * 	배열 선언과 동시에 초기값을 지정할 경우 사용하는 방식
		 * 	배열의 크기는 나열할 값의 갯수에 따라 달리진다.
		 * 	나열할 값은 반드시 타입과 일치해야 하며 그렇지 못할 경우 에러가 발생한다.
		 * 	배열을 선 선언 후에 값을 나중에 지정하여 선언하여도 무방하다.
		 * 
		 * 3. 접근방법
		 * 	배열안의 값에 접근하기 위해서는 반드시 인덱스 (주소) 를 필요로 한다.
		 * 	형태 : 배열명[위치]
		 * 	위치는 항상 주소 0을 기준으로부터 "전체 길이 -1"까지의 주소를 가진다.
		 * 배열의 한 값에 접근하여 값을 입력할 때도 위와 마찬가지로 접근하여 한 값만을 바꾸거나 아니면 출력할 수 있다.
		 * 
		 * 
		 * 	
		 */
		
		
		
		//int num[] = new int[5];
		
		/*num[0]= 1;
		num[1]= 2;
		num[2]= 3;
		num[3]= 4;
		num[4]= 5;*/
		
		int num1[] = {1,2,3,4,5};
		int num[]= new int[] {1,2,3,4,5};
		int num2[];
		num2 = new int[] {1,2,3,4,5};
		
		
		/*System.out.println(num[0]);
		System.out.println(num[1]);
		System.out.println(num[2]);
		System.out.println(num[3]);
		System.out.println(num[4]);*/
		
		for (int i = 0; i < num.length; i++)
		{
			System.out.println(num[i]);
		}
		for(int i :num) {
			System.out.println(i);
		}
	}

}
